{"version":3,"sources":["components/GlobalStyles.js","components/TodoTemplate.js","store/todoStore.js","components/TodoHead.js","components/TodoItem.js","components/TodoList.js","components/TodoCreate.js","reducers/TodoContext.js","components/App.js","index.js"],"names":["GlobalStyles","createGlobalStyle","reset","TodoTemplateContainer","styled","div","TodoTemplate","children","todoStore","observable","require","todos","id","text","done","nextId","create","data","this","push","toggle","map","todo","remove","filter","TodoHeadContainer","Title","h1","DateBox","TasksList","TodoHead","state","useLocalStore","undoneTasks","today","Date","dateString","toLocaleDateString","year","month","day","dayName","weekday","useObserver","length","Remove","TodoItemContainer","CheckCircle","props","css","Text","TodoItem","onToggle","onRemove","onClick","TodoListContainer","TodoList","key","CircleButton","button","open","InsertFormPositioner","InsertForm","form","Input","input","TodoCreate","value","onchangeValue","e","target","onSubmit","preventDefault","useState","setOpen","onChange","autoFocus","placeholder","initialTodos","todoReducer","action","type","concat","Error","TodoStateContext","createContext","TodoDispatchContext","TodoNextIdContext","TodoProvider","useReducer","dispatch","useRef","Provider","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a6dd61db.chunk.js","sourcesContent":["import { createGlobalStyle } from 'styled-components';\r\nimport reset from 'styled-reset';\r\nexport const GlobalStyles = createGlobalStyle`\r\n  ${reset};  \r\n  body {\r\n    background-color: #e9ecef;\r\n    color: rgb(55, 53, 47);\r\n    font-size: 15px;\r\n    font-weight: 400;\r\n    line-height: 1.65;\r\n  }\r\n`;\r\n\r\nexport const palette = {\r\n  white: 'rgba(255, 255, 255, 0.9)',\r\n  black: 'rgb(55, 53, 47);'\r\n};\r\n","// TodoTemplate.js\r\nimport React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst TodoTemplateContainer = styled.div`\r\n  width: 512px;\r\n  height: 768px;\r\n\r\n  position: relative; /* 추후 박스 하단에 추가 버튼을 위치시키기 위한 설정 */\r\n  background: white;\r\n  border-radius: 16px;\r\n  box-shadow: 0 0 8px 0 rgba(0, 0, 0, 0.04);\r\n\r\n  margin: 0 auto; /* 페이지 중앙에 나타나도록 설정 */\r\n\r\n  margin-top: 96px;\r\n  margin-bottom: 32px;\r\n  display: flex;\r\n  flex-direction: column;\r\n`;\r\n\r\nfunction TodoTemplate({ children }) {\r\n  return (\r\n    <>\r\n      <TodoTemplateContainer>{children}</TodoTemplateContainer>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default TodoTemplate;\r\n","// todoStore.js\r\nconst { observable } = require('mobx');\r\n\r\nconst todoStore = observable({\r\n  todos: [\r\n    {\r\n      id: 1,\r\n      text: 'React 배우기',\r\n      done: true,\r\n    },\r\n    {\r\n      id: 2,\r\n      text: 'Gatsby 배우기',\r\n      done: true,\r\n    },\r\n    {\r\n      id: 3,\r\n      text: 'node 백엔드 구현',\r\n      done: false,\r\n    },\r\n  ],\r\n  nextId: 4,\r\n  create(data) {\r\n    this.todos.push(data);\r\n    this.nextId = this.nextId + 1;\r\n  },\r\n  toggle(data) {\r\n    this.todos = this.todos.map((todo) => (todo.id === data.id ? { ...todo, done: !todo.done } : todo));\r\n  },\r\n  remove(data) {\r\n    this.todos = this.todos.filter((todo) => todo.id !== data.id);\r\n  },\r\n});\r\n\r\nexport default todoStore;\r\n","// TodoHead\r\nimport React from 'react';\r\nimport styled from 'styled-components';\r\nimport { useObserver, useLocalStore } from 'mobx-react';\r\nimport { todoStore } from '../store';\r\n\r\nconst TodoHeadContainer = styled.div`\r\n  padding-top: 48px;\r\n  padding-left: 32px;\r\n  padding-right: 32px;\r\n  padding-bottom: 24px;\r\n  border-bottom: 1px solid #e9ecef;\r\n`;\r\n\r\nconst Title = styled.h1`\r\n  margin: 0;\r\n  font-size: 36px;\r\n  color: #343a40;\r\n`;\r\n\r\nconst DateBox = styled.div`\r\n  margin-top: 4px;\r\n  color: #868e96;\r\n  font-size: 21px;\r\n`;\r\n\r\nconst TasksList = styled.div`\r\n  color: #20c997;\r\n  font-size: 18px;\r\n  margin-top: 40px;\r\n  font-weight: bold;\r\n`;\r\n\r\nconst TodoHead = () => {\r\n  const state = useLocalStore(() => ({\r\n    undoneTasks: todoStore.todos.filter((todo) => !todo.done),\r\n  }));\r\n  // console.log(todos);\r\n  const today = new Date();\r\n  // console.log(today);\r\n  const dateString = today.toLocaleDateString('ko-KR', {\r\n    year: 'numeric',\r\n    month: 'long',\r\n    day: 'numeric',\r\n  });\r\n  const dayName = today.toLocaleDateString('ko-KR', { weekday: 'long' });\r\n  return useObserver(() => (\r\n    <>\r\n      <TodoHeadContainer>\r\n        <Title>{dateString}</Title>\r\n        <DateBox>{dayName}</DateBox>\r\n        <TasksList>할 일 {state.undoneTasks.length}개 남음</TasksList>\r\n      </TodoHeadContainer>\r\n    </>\r\n  ));\r\n};\r\n\r\nexport default TodoHead;\r\n","// TodoItem.js\r\nimport React from 'react';\r\nimport styled, { css } from 'styled-components';\r\nimport { MdDone, MdDelete } from 'react-icons/md';\r\nimport { useObserver } from 'mobx-react';\r\nimport { todoStore } from '../store';\r\n\r\nconst Remove = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  color: #dee2e6;\r\n  font-size: 24px;\r\n  cursor: pointer;\r\n  &:hover {\r\n    color: #ff6b6b;\r\n  }\r\n  display: none;\r\n`;\r\n\r\nconst TodoItemContainer = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  padding-top: 12px;\r\n  padding-bottom: 12px;\r\n  &:hover {\r\n    ${Remove} {\r\n      display: initial;\r\n    }\r\n  }\r\n`;\r\n\r\nconst CheckCircle = styled.div`\r\n  width: 32px;\r\n  height: 32px;\r\n  border-radius: 16px;\r\n  border: 1px solid #ced4da;\r\n  font-size: 24px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  margin-right: 20px;\r\n  cursor: pointer;\r\n  ${(props) =>\r\n    props.done &&\r\n    css`\r\n      border: 1px solid #38d9a9;\r\n      color: #38d9a9;\r\n    `}\r\n`;\r\n\r\nconst Text = styled.div`\r\n  flex: 1;\r\n  font-size: 21px;\r\n  color: #495057;\r\n  ${(props) =>\r\n    props.done &&\r\n    css`\r\n      color: #ced4da;\r\n    `}\r\n`;\r\n\r\nconst TodoItem = ({ id, done, text }) => {\r\n  const onToggle = () => {\r\n    todoStore.toggle({ id });\r\n  };\r\n  const onRemove = () => {\r\n    todoStore.remove({ id });\r\n  };\r\n  return useObserver(() => (\r\n    <>\r\n      <TodoItemContainer>\r\n        <CheckCircle done={done} onClick={onToggle}>\r\n          {done && <MdDone />}\r\n        </CheckCircle>\r\n        <Text done={done}>{text}</Text>\r\n        <Remove onClick={onRemove}>\r\n          <MdDelete />\r\n        </Remove>\r\n      </TodoItemContainer>\r\n    </>\r\n  ));\r\n};\r\n\r\nexport default TodoItem;\r\n","// TodoList.js\r\nimport React from 'react';\r\nimport styled from 'styled-components';\r\nimport TodoItem from './TodoItem';\r\nimport { useObserver } from 'mobx-react';\r\nimport { todoStore } from '../store';\r\n\r\nconst TodoListContainer = styled.div`\r\n  flex: 1;\r\n  padding: 20px 32px;\r\n  padding-bottom: 48px;\r\n  overflow-y: auto;\r\n`;\r\n\r\nconst TodoList = () => {\r\n  return useObserver(() => (\r\n    <TodoListContainer>\r\n      {todoStore.todos.map((todo) => (\r\n        <TodoItem key={todo.id} id={todo.id} text={todo.text} done={todo.done} />\r\n      ))}\r\n    </TodoListContainer>\r\n  ));\r\n};\r\n\r\nexport default TodoList;\r\n","import React, { useState } from 'react';\r\nimport styled, { css } from 'styled-components';\r\nimport { MdAdd } from 'react-icons/md';\r\nimport { useObserver, useLocalStore } from 'mobx-react';\r\nimport { todoStore } from '../store';\r\n\r\nconst CircleButton = styled.button`\r\n  background: #38d9a9;\r\n  &:hover {\r\n    background: #63e6be;\r\n  }\r\n  &:active {\r\n    background: #20c997;\r\n  }\r\n\r\n  z-index: 5;\r\n  cursor: pointer;\r\n  width: 80px;\r\n  height: 80px;\r\n  display: block;\r\n  align-items: center;\r\n  justify-content: center;\r\n  font-size: 60px;\r\n  position: absolute;\r\n  left: 50%;\r\n  bottom: 0px;\r\n  transform: translate(-50%, 50%);\r\n  color: white;\r\n  border-radius: 50%;\r\n  border: none;\r\n  outline: none;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n\r\n  transition: 0.125s all ease-in;\r\n  ${(props) =>\r\n    props.open &&\r\n    css`\r\n      background: #ff6b6b;\r\n      &:hover {\r\n        background: #ff8787;\r\n      }\r\n      &:active {\r\n        background: #fa5252;\r\n      }\r\n      transform: translate(-50%, 50%) rotate(45deg);\r\n    `}\r\n`;\r\n\r\nconst InsertFormPositioner = styled.div`\r\n  width: 100%;\r\n  bottom: 0;\r\n  left: 0;\r\n  position: absolute;\r\n`;\r\n\r\nconst InsertForm = styled.form`\r\n  background: #f8f9fa;\r\n  padding-left: 32px;\r\n  padding-top: 32px;\r\n  padding-right: 32px;\r\n  padding-bottom: 72px;\r\n\r\n  border-bottom-left-radius: 16px;\r\n  border-bottom-right-radius: 16px;\r\n  border-top: 1px solid #e9ecef;\r\n`;\r\n\r\nconst Input = styled.input`\r\n  padding: 12px;\r\n  border-radius: 4px;\r\n  border: 1px solid #dee2e6;\r\n  width: 100%;\r\n  outline: none;\r\n  font-size: 18px;\r\n  box-sizing: border-box;\r\n`;\r\n\r\nconst TodoCreate = () => {\r\n  const state = useLocalStore(() => ({\r\n    value: '',\r\n    onchangeValue(e) {\r\n      this.value = e.target.value;\r\n    },\r\n  }));\r\n\r\n  const onSubmit = (e) => {\r\n    e.preventDefault(); // 새로고침 방지\r\n    todoStore.create({\r\n      id: todoStore.nextId,\r\n      text: state.value,\r\n      done: false,\r\n    });\r\n    state.value = '';\r\n  };\r\n\r\n  const [open, setOpen] = useState(false);\r\n\r\n  const onToggle = () => setOpen(!open);\r\n  return useObserver(() => (\r\n    <>\r\n      {open && (\r\n        <InsertFormPositioner>\r\n          <InsertForm onSubmit={onSubmit}>\r\n            <Input value={state.value} onChange={state.onchangeValue} autoFocus placeholder=\"할 일을 입력 후, Enter 를 누르세요\" />\r\n          </InsertForm>\r\n        </InsertFormPositioner>\r\n      )}\r\n      <CircleButton onClick={onToggle} open={open}>\r\n        <MdAdd />\r\n      </CircleButton>\r\n    </>\r\n  ));\r\n};\r\n\r\nexport default TodoCreate;\r\n","// TodoContext.js\r\nimport React, { useReducer, createContext, useContext, useRef } from 'react';\r\n\r\nconst initialTodos = [\r\n  {\r\n    id: 1,\r\n    text: 'React 배우기',\r\n    done: true,\r\n  },\r\n  {\r\n    id: 2,\r\n    text: 'Gatsby 배우기',\r\n    done: true,\r\n  },\r\n  {\r\n    id: 3,\r\n    text: 'node 백엔드 구현',\r\n    done: false,\r\n  },\r\n];\r\n\r\nconst todoReducer = (state, action) => {\r\n  switch (action.type) {\r\n    case 'CREATE':\r\n      return state.concat(action.todo);\r\n    case 'TOGGLE':\r\n      return state.map((todo) => (todo.id === action.id ? { ...todo, done: !todo.done } : todo));\r\n    case 'REMOVE':\r\n      return state.filter((todo) => todo.id !== action.id);\r\n    default:\r\n      throw new Error(`Unhandled action type: ${action.type}`);\r\n  }\r\n};\r\n\r\nconst TodoStateContext = createContext();\r\nconst TodoDispatchContext = createContext();\r\nconst TodoNextIdContext = createContext();\r\n\r\nexport function TodoProvider({ children }) {\r\n  const [state, dispatch] = useReducer(todoReducer, initialTodos);\r\n  const nextId = useRef(5);\r\n  return (\r\n    <TodoStateContext.Provider value={state}>\r\n      <TodoDispatchContext.Provider value={dispatch}>\r\n        <TodoNextIdContext.Provider value={nextId}>{children}</TodoNextIdContext.Provider>\r\n      </TodoDispatchContext.Provider>\r\n    </TodoStateContext.Provider>\r\n  );\r\n}\r\n\r\nexport function useTodoState() {\r\n  const context = useContext(TodoStateContext);\r\n  if (!context) {\r\n    throw new Error('Cannot find TodoProvider');\r\n  }\r\n  return context;\r\n}\r\n\r\nexport function useTodoDispatch() {\r\n  const context = useContext(TodoDispatchContext);\r\n  if (!context) {\r\n    throw new Error('Cannot find TodoProvider');\r\n  }\r\n  return context;\r\n}\r\n\r\nexport function useTodoNextId() {\r\n  const context = useContext(TodoNextIdContext);\r\n  if (!context) {\r\n    throw new Error('Cannot find TodoProvider');\r\n  }\r\n  return context;\r\n}\r\n","// App.js\nimport React from 'react';\nimport { GlobalStyles } from './GlobalStyles';\nimport TodoTemplate from './TodoTemplate';\nimport TodoHead from './TodoHead';\nimport TodoList from './TodoList';\nimport TodoCreate from './TodoCreate';\nimport { TodoProvider } from '../reducers/TodoContext';\n\nfunction App() {\n  return (\n    <TodoProvider>\n      <GlobalStyles />\n      <TodoTemplate>\n        <TodoHead />\n        <TodoList />\n        <TodoCreate />\n      </TodoTemplate>\n    </TodoProvider>\n  );\n}\n\nexport default App;\n","//index.js\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}